{"$message_type":"diagnostic","message":"unknown character escape: `,`","code":null,"level":"error","spans":[{"file_name":"crates\\window-demo\\src\\main.rs","byte_start":10002,"byte_end":10003,"line_start":219,"line_end":219,"column_start":46,"column_end":47,"is_primary":true,"text":[{"text":"    c3.y_axis = Axis::new(\" Delta Close-Open\\, min_h.min(0.0), max_h.max(0.0));","highlight_start":46,"highlight_end":47}],"label":"unknown character escape","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for more information, visit <https://doc.rust-lang.org/reference/tokens.html#literals>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if you meant to write a literal backslash (perhaps escaping in a regular expression), consider a raw string literal","code":null,"level":"help","spans":[{"file_name":"crates\\window-demo\\src\\main.rs","byte_start":9983,"byte_end":10499,"line_start":219,"line_end":231,"column_start":27,"column_end":28,"is_primary":true,"text":[{"text":"    c3.y_axis = Axis::new(\" Delta Close-Open\\, min_h.min(0.0), max_h.max(0.0));","highlight_start":27,"highlight_end":80},{"text":"    c3.add_series(Series::with_data(SeriesType::Histogram, xy_diff).with_baseline(0.0));","highlight_start":1,"highlight_end":89},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 4) Baseline of closes vs average","highlight_start":1,"highlight_end":40},{"text":"    let xy_close: Vec<(f64, f64)> = candles","highlight_start":1,"highlight_end":44},{"text":"        .iter()","highlight_start":1,"highlight_end":16},{"text":"        .enumerate()","highlight_start":1,"highlight_end":21},{"text":"        .map(|(i, c)| (i as f64, c.c))","highlight_start":1,"highlight_end":39},{"text":"        .collect();","highlight_start":1,"highlight_end":20},{"text":"    let avg_close = candles.iter().map(|c| c.c).sum::<f64>() / (n as f64);","highlight_start":1,"highlight_end":75},{"text":"    let (min_c, max_c) = minmax_xy(&xy_close);","highlight_start":1,"highlight_end":47},{"text":"    let mut c4 = Chart::new();","highlight_start":1,"highlight_end":31},{"text":"    c4.x_axis = Axis::new(\"Index\", 0.0, (n - 1) as f64);","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":"r\" Delta Close-Open\\, min_h.min(0.0), max_h.max(0.0));\n    c3.add_series(Series::with_data(SeriesType::Histogram, xy_diff).with_baseline(0.0));\n\n    // 4) Baseline of closes vs average\n    let xy_close: Vec<(f64, f64)> = candles\n        .iter()\n        .enumerate()\n        .map(|(i, c)| (i as f64, c.c))\n        .collect();\n    let avg_close = candles.iter().map(|c| c.c).sum::<f64>() / (n as f64);\n    let (min_c, max_c) = minmax_xy(&xy_close);\n    let mut c4 = Chart::new();\n    c4.x_axis = Axis::new(\"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unknown character escape: `,`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcrates\\window-demo\\src\\main.rs:219:46\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m219\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    c3.y_axis = Axis::new(\" Delta Close-Open\\, min_h.min(0.0), max_h.max(0.\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown character escape\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: for more information, visit <https://doc.rust-lang.org/reference/tokens.html#literals>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you meant to write a literal backslash (perhaps escaping in a regular expression), consider a raw string literal\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m219\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    c3.y_axis = Axis::new(\u001b[0m\u001b[0m\u001b[38;5;10mr\u001b[0m\u001b[0m\" Delta Close-Open\\, min_h.min(0.0), max_h.max(0.0));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"prefix `csv` is unknown","code":null,"level":"error","spans":[{"file_name":"crates\\window-demo\\src\\main.rs","byte_start":12924,"byte_end":12927,"line_start":290,"line_end":290,"column_start":92,"column_end":95,"is_primary":true,"text":[{"text":"    let mut rdr = csv::ReaderBuilder::new().has_headers(true).from_path(path).expect(\"open csv\");","highlight_start":92,"highlight_end":95}],"label":"unknown prefix","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"prefixed identifiers and literals are reserved since Rust 2021","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider inserting whitespace here","code":null,"level":"help","spans":[{"file_name":"crates\\window-demo\\src\\main.rs","byte_start":12927,"byte_end":12927,"line_start":290,"line_end":290,"column_start":95,"column_end":95,"is_primary":true,"text":[{"text":"    let mut rdr = csv::ReaderBuilder::new().has_headers(true).from_path(path).expect(\"open csv\");","highlight_start":95,"highlight_end":95}],"label":null,"suggested_replacement":" ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: prefix `csv` is unknown\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcrates\\window-demo\\src\\main.rs:290:92\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m290\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0mom_path(path).expect(\"open csv\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown prefix\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: prefixed identifiers and literals are reserved since Rust 2021\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider inserting whitespace here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m290\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    let mut rdr = csv::ReaderBuilder::new().has_headers(true).from_path(path).expect(\"open csv\u001b[0m\u001b[0m\u001b[38;5;10m \u001b[0m\u001b[0m\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                               \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unterminated double quote string","code":{"code":"E0765","explanation":"A double quote string (`\"`) was not terminated.\n\nErroneous code example:\n\n```compile_fail,E0765\nlet s = \"; // error!\n```\n\nTo fix this error, add the missing double quote at the end of the string:\n\n```\nlet s = \"\"; // ok!\n```\n"},"level":"error","spans":[{"file_name":"crates\\window-demo\\src\\main.rs","byte_start":13597,"byte_end":14897,"line_start":304,"line_end":335,"column_start":37,"column_end":3,"is_primary":true,"text":[{"text":"        let rec = rec.expect(\"record\");","highlight_start":37,"highlight_end":40},{"text":"        let parse = |i: Option<usize>| -> Option<f64> { i.and_then(|ix| rec.get(ix)).and_then(|s| s.trim().parse::<f64>().ok()) };","highlight_start":1,"highlight_end":131},{"text":"        let t = if let Some(ix) = i_time { rec.get(ix).and_then(parse_time_to_f64).unwrap_or_else(|| { let v=row_index; row_index+=1.0; v }) } else { let v=row_index; row_index+=1.0; v };","highlight_start":1,"highlight_end":188},{"text":"        let (o, h, l, c) = (parse(i_open), parse(i_high), parse(i_low), parse(i_close));","highlight_start":1,"highlight_end":89},{"text":"        if let (Some(o), Some(h), Some(l), Some(c)) = (o, h, l, c) { out.push(Candle { t, o, h, l, c }); }","highlight_start":1,"highlight_end":107},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    out","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"fn parse_time_to_f64(s: &str) -> Option<f64> {","highlight_start":1,"highlight_end":47},{"text":"    let s = s.trim();","highlight_start":1,"highlight_end":22},{"text":"    if s.is_empty() { return None; }","highlight_start":1,"highlight_end":37},{"text":"    if let Ok(n) = s.parse::<i64>() {","highlight_start":1,"highlight_end":38},{"text":"        if n > 10_i64.pow(12) { return Some(n as f64 / 1000.0); }","highlight_start":1,"highlight_end":66},{"text":"        if n > 10_i64.pow(9)  { return Some(n as f64); }","highlight_start":1,"highlight_end":57},{"text":"        return Some(n as f64);","highlight_start":1,"highlight_end":31},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    None","highlight_start":1,"highlight_end":9},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"fn minmax_price(c: &[Candle]) -> (f64, f64) {","highlight_start":1,"highlight_end":46},{"text":"    let mut min_p = f64::INFINITY;","highlight_start":1,"highlight_end":35},{"text":"    let mut max_p = f64::NEG_INFINITY;","highlight_start":1,"highlight_end":39},{"text":"    for k in c { min_p = min_p.min(k.l); max_p = max_p.max(k.h); }","highlight_start":1,"highlight_end":67},{"text":"    (min_p, max_p)","highlight_start":1,"highlight_end":19},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"fn minmax_xy(v: &[(f64, f64)]) -> (f64, f64) {","highlight_start":1,"highlight_end":47},{"text":"    let mut min_v = f64::INFINITY; let mut max_v = f64::NEG_INFINITY;","highlight_start":1,"highlight_end":70},{"text":"    for &(_, y) in v { min_v = min_v.min(y); max_v = max_v.max(y); }","highlight_start":1,"highlight_end":69},{"text":"    (min_v, max_v)","highlight_start":1,"highlight_end":19},{"text":"}","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0765]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unterminated double quote string\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mcrates\\window-demo\\src\\main.rs:304:37\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m304\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let rec = rec.expect(\"record\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m _____________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m305\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let parse = |i: Option<usize>| -> Option<f64> { i.and_then(|ix| r\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m306\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let t = if let Some(ix) = i_time { rec.get(ix).and_then(parse_tim\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m307\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (o, h, l, c) = (parse(i_open), parse(i_high), parse(i_low), p\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m334\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    (min_v, max_v)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m335\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|__^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 3 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 3 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0765`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about this error, try `rustc --explain E0765`.\u001b[0m\n"}
